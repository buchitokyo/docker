version: '3.9'

services:
  app:
    build:
      context: .
      dockerfile: ./docker/php/Dockerfile
      args:
        - TZ=${TZ}
        - SSH_PRIVATE_KEY=${SSH_PRIVATE_KEY}
    environment:
      - DB_CONNECTION=mysql
      - DB_HOST=db
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USER}
      - DB_PASSWORD=${DB_PASS}
      - TZ=${TZ}
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_DRIVER=redis
      - REDIS_HOST=redis
    volumes:
      - ./src:/var/www
      - ./logs:/var/log/php
      - ./docker/php/php.ini:/usr/local/etc/php/php.ini
      - ./docker/php/php-fpm.d/zzz-www.conf:/usr/local/etc/php-fpm.d/zzz-www.conf
      - php-fpm-socket:/var/run/php-fpm
    tty: true
    working_dir: /var/www
    depends_on:
      - db
    networks:
      default:
      app_network:

  web:
    build:
      context: .
      dockerfile: ./docker/nginx/Dockerfile
    ports:
      - ${LOCAL_IP}:8000:8000
    volumes:
      - ./src:/var/www
      - ./logs:/var/log/nginx
      - ./docker/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - php-fpm-socket:/var/run/php-fpm
    environment:
      - TZ=${TZ}
    links:
      - app
    depends_on:
      - app
    networks:
      default:
      app_network:
        aliases:
          - enhance-dev

  db:
    platform: linux/x86_64
    image: mysql:8.0.28
    volumes:
      - db-store:/var/lib/mysql
      - ./logs:/var/log/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    environment:
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASS}
      - MYSQL_ROOT_PASSWORD=${DB_PASS}
      - TZ=${TZ}
    ports:
      - ${LOCAL_IP}:3306:3306
    networks:
      default:
      app_network:

  db-test:
    platform: linux/x86_64
    image: mysql:8.0.28
    environment:
      - MYSQL_DATABASE=${DB_TEST_DATABASE}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASS}
      - MYSQL_ROOT_PASSWORD=${DB_PASS}
      - TZ=${TZ}
    ports:
      - ${LOCAL_IP}:${DB_TEST_PORT}:3306
    networks:
      default:
      app_network:

  front_app:
    build:
      context: .
      dockerfile: ./docker/node/Dockerfile
      args:
        - TZ=${TZ}
    volumes:
      - ./src/client:/var/www/client
    ports:
      - ${LOCAL_IP}:3000:3000
      - ${LOCAL_IP}:19009:9009
    tty: true
    links:
      - web
    depends_on:
      - web
    networks:
      - default
      - app_network

  redis:
    image: redis:6.2-alpine3.15
    volumes:
      - redis-store:/data
    ports:
      - ${LOCAL_IP}:6379:6379
    networks:
      default:
      app_network:

  mail:
    image: mailhog/mailhog
    ports:
      - ${LOCAL_IP}:8025:8025
    networks:
      default:
      app_network:

  minio:
    image: minio/minio:latest
    environment:
        MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
        MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
    entrypoint: bash
    # command: -c "/opt/bin/minio server /export --address :9999 --console-address :9001"
    command: -c "
      mkdir -p /data/.minio.sys/buckets;
      cp -r /policies/* /data/.minio.sys/;
      cp -r /export/* /data/;
      /opt/bin/minio server /data --console-address :9001"
    volumes:
        - ./docker/minio/export:/export
        - ./docker/minio/policies:/policies
    ports:
        - ${LOCAL_IP}:9000:9000
        - ${LOCAL_IP}:9001:9001
    networks:
      default:
      app_network:

networks:
  app_network:
    external: true

volumes:
  php-fpm-socket:
    driver: local
  db-store:
    driver: local
  redis-store:
    driver: local
  minio-data:
    driver: local